// Combined Prisma schema for demo app
// Includes both platform base schema and demo-specific extensions

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================================================
// BASE PLATFORM SCHEMA (from packages/store-prisma)
// ============================================================================

enum Plan {
  FREE
  PRO
  TEAM
  ENTERPRISE
}

enum Consent {
  DECLINED
  ACCEPTED
}

model AppUser {
  id            String      @id @default(uuid())
  authUserId    String      @unique
  email         String?     @unique
  name          String?
  provider      String?     // google, linkedin, facebook, email
  plan          Plan        @default(FREE)
  consent       Consent     @default(DECLINED)
  lastSignInAt  DateTime?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  sessions      Session[]
  demoSessions  DemoSession[]  // Demo extension relation
}

model Session {
  id            String        @id @default(cuid())
  userId        String?
  user          AppUser?      @relation(fields: [userId], references: [id], onDelete: SetNull)
  openAiSession String
  skill         String
  configJson    Json
  timingsJson   Json
  consent       Consent       @default(DECLINED)
  startedAt     DateTime      @default(now())
  endedAt       DateTime?
  transcripts   Transcript[]
  toolEvents    ToolEvent[]
  summaries     Summary[]
  usageEvents   UsageEvent[]
}

model Transcript {
  id         String   @id @default(cuid())
  sessionId  String
  session    Session  @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  role       String
  text       String
  startedAt  DateTime
  endedAt    DateTime
  createdAt  DateTime @default(now())
}

model Summary {
  id         String   @id @default(cuid())
  sessionId  String
  session    Session  @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  text       String
  createdAt  DateTime @default(now())
}

model ToolEvent {
  id         String   @id @default(cuid())
  sessionId  String
  session    Session  @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  name       String
  argsJson   Json
  resultJson Json?
  createdAt  DateTime @default(now())
}

model UsageEvent {
  id         String   @id @default(cuid())
  sessionId  String
  session    Session  @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  kind       String
  value      Float
  metaJson   Json?
  createdAt  DateTime @default(now())
}

// ============================================================================
// DEMO-SPECIFIC EXTENSIONS
// ============================================================================

enum DemoType {
  VOICE
  CHAT
  VIDEO
}

enum DemoStatus {
  ACTIVE
  COMPLETED
  CANCELLED
}

model DemoSession {
  id          String       @id @default(uuid())
  userId      String
  user        AppUser      @relation(fields: [userId], references: [id], onDelete: Cascade)
  sessionName String
  demoType    DemoType
  metadata    Json?
  status      DemoStatus   @default(ACTIVE)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  feedback    DemoFeedback[]

  @@map("demo_sessions")
}

model DemoFeedback {
  id          String      @id @default(uuid())
  sessionId   String
  userId      String
  rating      Int         @db.SmallInt
  feedback    String?
  category    String
  createdAt   DateTime    @default(now())
  session     DemoSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@map("demo_feedback")
}